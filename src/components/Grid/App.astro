---
export type Props = {
  area: string;
};

const { area } = Astro.props;
---

<div class="wrapper" id={area}>
  <div class="card">
    <slot>
      <div class="placeholder">
        Placeholder ({area})
      </div>
    </slot>
  </div>
</div>

<script define:vars={{ area }}>
  const wrapper = document.querySelector(`#${area}`);

  const easing = (value) => {
    return Math.abs(value) ** 1 * (value / Math.abs(value));
  };

  const clamp = (value) => Math.min(1, Math.max(0, value));

  const _handleMouseMove = (event) => {
    const { pageX, pageY } = event;

    const { left, top, width, height } = wrapper.getBoundingClientRect();
    const x = (clamp((pageX - left) / width) - 0.5) * 2;
    const y = -(clamp((pageY - window.scrollY - top) / height) - 0.5) * 2;

    wrapper.style.setProperty("--x", easing(x));
    wrapper.style.setProperty("--y", easing(y));
  };

  const _handleMouseLeave = () => {
    wrapper.style.setProperty("--x", 0);
    wrapper.style.setProperty("--y", 0);
  };
  _handleMouseLeave();

  wrapper.addEventListener("mousemove", _handleMouseMove);
  wrapper.addEventListener("mouseleave", _handleMouseLeave);
</script>

<style lang="scss" define:vars={{ area }}>
  div.wrapper {
    width: 100%;
    height: 100%;
    perspective: 1000px;
    min-height: 240px;
    grid-area: var(--area);
    div.card {
      width: 100%;
      height: 100%;
      transform: rotate3d(var(--y), var(--x), 0, -8deg);
      overflow: hidden;
      div.placeholder {
        width: 100%;
        height: 100%;
        background-color: red;
      }
    }
  }
</style>
